#!/usr/bin/env perl

system("mkdir -p NEW DIFF");

if (@ARGV != 5) {
    print "Usage: TESToutfile name input output outfile options\n";
    exit 20;
}

$name=$ARGV[0];
$input=$ARGV[1];
$output=$ARGV[2];
$outfile=$ARGV[3];
$options=$ARGV[4];

my $r, $out;


if ($^O eq 'MSWin32') {
    $r = system "..\\windump -n -t -r $input $options -w NEW/$outfile 2>NUL | sed 's/\\r//' | tee NEW/$output | diff $output - >DIFF/$output.diff";
    $out = system "diff NEW/$outfile $outfile >DIFF/$outfile.diff"
    # check the above in a windows box
} else {
    $r = system "../tcpdump 2>/dev/null -n -t -r $input $options -w NEW/$outfile >NEW/$output";
    if ($r != 0) {
        open(OUTPUT, ">>", "NEW/$output") || die "failed to open $output\n";
        printf OUTPUT "EXIT CODE %08\n", $r;
        close(OUTPUT);
        $r = 0;
    }
    if ($r == 0) {
        $r = system "cat NEW/$output | diff $output - >DIFF/$output.diff";
        $out = system "diff NEW/$outfile $outfile >DIFF/$outfile.diff";
    }
}

if ($r == 0 && $out == 0) {
  printf "    %-35s: passed\n", $name;
  unlink "DIFF/$output.diff";
  exit 0;
}

printf "    %-35s: TEST FAILED", $name;
open FOUT, '>>failure-outputs.txt';
printf FOUT "Failed test: $name\n\n";
close FOUT;

if (-f "DIFF/$output.diff") {
    system "cat DIFF/$output.diff >> failure-outputs.txt";
}
if (-f "DIFF/$outfile.diff") {
    system "echo 'Savefile $output differs from expected.' >> failure-outputs.txt";
}

if ($r == -1) {
    print " (failed to execute: $!)\n";
    exit 30;
}

# this is not working right, $r == 0x8b00 when there is a core dump.
# clearly, we need some platform specific perl magic to take this apart, so look for "core"
# too.
# In particular, on Solaris 10 SPARC an alignment problem results in SIGILL,
# a core dump and $r set to 0x00008a00 ($? == 138 in the shell).
if($r & 127 || -f "core") {
    my $with = ($r & 128) ? 'with' : 'without';
    if(-f "core") {
        $with = "with";
    }
    printf " (terminated with signal %u, %s coredump)\n", ($r & 127), $with;
    exit ($r & 128) ? 10 : 20;
}
print "\n";
exit $r >> 8;
